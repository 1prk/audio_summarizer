from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
from urllib.parse import urlparse


class Cookie:
    def __init__(self):
        self.chrome_options = Options()
        self.chrome_options.add_argument("--headless")
        self.chrome_options.add_argument("--disable-gpu")
        self.chrome_options.add_argument("--no-sandbox")

    def get_cookies(self, url):
        driver = webdriver.Chrome(options=self.chrome_options)
        driver.get(url)
        driver.implicitly_wait(5)
        cookies = driver.get_cookies()
        driver.quit()
        return cookies

    def save_cookies_netscape(self, url, filename='cookies.txt'):
        cookies = self.get_cookies(url)
        domain = urlparse(url).netloc

        with open(filename, 'w') as f:
            # Schreibe Netscape Cookie File Header
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# https://curl.haxx.se/rfc/cookie_spec.html\n")
            f.write("# This file was generated by python-selenium\n\n")

            for cookie in cookies:
                secure = "TRUE" if cookie.get('secure', False) else "FALSE"
                http_only = "TRUE" if cookie.get('httpOnly', False) else "FALSE"
                expires = str(
                    int(time.time() + 365 * 24 * 3600) if cookie.get('expiry') is None else int(cookie.get('expiry')))

                # Formatiere jeden Cookie nach Netscape-Spezifikation:
                # domain FLAG path secure expiry name value
                cookie_line = (
                    f"{cookie.get('domain', domain).lstrip('.')}\t"  # Domain ohne führenden Punkt
                    f"FALSE\t"  # FLAG ist immer FALSE für normale Cookies
                    f"{cookie.get('path', '/')}\t"  # Path
                    f"{secure}\t"  # Secure Flag
                    f"{expires}\t"  # Expiry Time
                    f"{cookie['name']}\t"  # Cookie Name
                    f"{cookie['value']}\n"  # Cookie Value
                )
                f.write(cookie_line)

        return True